{"version":3,"sources":["assets/logo.svg","assets/githubbackground.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","key","full_name","to","owner","avatar_url","login","description","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","size","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2b1c563.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubbackground.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/githubbackground.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  display: flex;\n  margin-top: 40px;\n  max-width: 700px;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n    transition: border-color 0.5s;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0px 5px 5px 0px;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n  }\n\n  img {\n    width: 64px;\n    height: 64px;\n    border-radius: 50%;\n  }\n\n  div {\n    margin-left: 16px;\n\n    strong {\n      font-size: 20px;\n      color: #3d3d4d;\n    }\n\n    p {\n      font-size: 18px;\n      color: #a8a8b3;\n      margin-top: 4px;\n    }\n  }\n\n  svg {\n    margin-left: auto;\n    color: #cbcbd6;\n  }\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`/repos/${newRepo}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Explore reposit贸rios no Github</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n            <FiChevronRight />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n  }\n\n  div {\n    margin-left: 16px;\n\n    strong {\n      font-size: 20px;\n      color: #3d3d4d;\n    }\n\n    p {\n      font-size: 18px;\n      color: #a8a8b3;\n      margin-top: 4px;\n    }\n  }\n\n  svg {\n    margin-left: auto;\n    color: #cbcbd6;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  title: string;\n  id: number;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data);\n    });\n\n    // async function loadData(): Promise<void> {\n    //   const [repository, issues] = await Promise.all([\n    //     api.get(`repos/${params.repository}`),\n    //     api.get(`repos/${params.repository}/issues`),\n    //   ]);\n    // }\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  // O \"+\" 茅 para indicar que a '/' depois de repositories/ tamb茅m deve ser usada\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\n\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <HashRouter>\n      <Routes />\n    </HashRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}